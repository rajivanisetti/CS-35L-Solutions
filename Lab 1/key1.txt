1.1)

e m a c s SP e x e r 1 . h t m l 

2.

C-s H T M C-f

3.

C-s s c

4.

Backspace e l f

5.

Backspace Backspace Backspace Backspace a r r o w

6. 

C-e

7.

C-a

8.

(I did not utilize the arrow keys. Instead, I made use of the search in emacs to find each word/phrase)

9. No

10.

C-x C-s C-x C-c


1.2)

1. e m a c s SP e x e r 2 . h t m l

2. 

C-s < ! - C-a C-spc C-e Backspace

3.

C-s < ! C-a C-spc C-e Backspace

4.

C-s < ! C-a C-spc C-e C-n C-n Backspace

5.

C-s < ! C-b C-b C-spc C-f C-f C-f C-f C-f C-f C-f Backspace

C-s < ! C-a C-spc C-n C-n C-n C-e Backspace

C-s < ! C-a C-spc C-e Backspace

C-x C-s C-x C-c


1.3)

1.

e m a c s SP e x e r 3 . h t m l

2.

C-s A s s i g n m e n t C-f 5

C-s A s s i g n m e n t C-f 5

3.

C-s U T F - C-f Backspace Backspace Backspace Backspace Backspace U S - A S C I I

4.

M-< C-s < / o C-e Enter

5.

C-x C-s C-x C-c

d i f f SP - u SP e x e r 1 . h t m l SP e x e r 3 . h t m l SP > e x e r 3 . d i f f

e m a c s SP e x e r 3 . d i f f


1.4)

1. 

c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l

2. 

e m a c s SP e x e r 4 . h t m l

3/4.

M-> C-p C-p C-e C-f C-SP C-e M-w C-r < / h t C-r C-n C-y

M-> C-r - < p C-r C-f C-SP C-e M-w C-r < / s a C-r C-r C-r C-n C-n C-SP C-e Backspace C-y

M-> C-r - < ! C-r V-f C-SP C-n C-n C-n C-e M-w C-r s h o C-n C-y C-a C-f Backspace C-p C-f Backspace C-p C-f Backspace

M-> C-r - < ! - C-r C-r C-f C-SP C-n C-n C-e M-w C-r < / h 2 C-r S u b m i t C-r C-r C-n C-n C-y C-a C-f Backspace C-p C-f Backspace

M-> M-v C-s - < ! C-s C-b C-b C-b C-SP C-e M-w C-r H o m e C-r C-n C-n C-y 

C-s - < ! C-b C-b C-b C-SP C-n C-e M-w C-r L a b C-n C-n C-y 

5. 

C-s + + C-p C-b C-b M-> C-w 

6.

C-_ C-_ C-_ 

7.

< ! - - M-> - - > 

8.

M-x r e p l a c e SP s t r i n g Enter < o l > Enter < o L > Enter

(There were 7 occurrences)

9.

C-x C-s C-x C-y 

d i f f SP - u SP e x er 1 . h t m l SP e x er 4 . h t m l SP > e x e r 4 . d i f f Enter

(Only differences were <ol> to <oL> and comment at end)


1.5)

1.

c d Enter

m k d i r SP j u n k Enter

2.

e m a c s Enter

C-x C-f h e l l o . c Enter

(Copy/Paste code from site)

3.

M-x compile Enter

Backspace Backspace Backspace Backspace Backspace Backspace Backspace Backspace

4.

g c c SP - o SP h e l l o SP h e l l o . c

C-x b h e l l o - o u t Enter

M-! . / h e l l o Enter

5.

#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, \
b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

C-x C-s h e l l o - o u t Enter C-x C-c

1.6)

1.

C-x b Enter

2.

( r a n d o m ) C-j

3.

( s e t q SP x SP ( r a n d o m ) ) C-j

( s e t q SP y SP ( r a n d o m ) ) C-j

4.

( - SP x SP y ) C-j

(The difference given by emacs is -622160363091745528, which makes no sense as my y integer was negative and my x integer was positive. There is no way a positve number minus a negative number would ever be negative. Thus, it is clear that there is some overflow occurring here causing an incorrect result.)

5.

M - : SP ( - SP x SP y ) C-j

(This gives me back the same evalution but also gives me back a hexidecimal and octadecimal values for the number.)

6.

(There is no way that these numbers can be truly random. Emacs must be using some sort of algorithm, whether based on time or some other factor to generate these "random" numbers. Because it uses some method, it violates the idea of being truly random. In addition, the numbers generated must be within some threshold due to memory capacity. Finally, after looking through the emacs manual, it stated that the numbers are "pesudo-random", as no computer can generate a truly random number. Thus, it is impossible for these numbers to be truly random.)

7.

The probability of overflow would be around 1/4. If one were to draw a cartesian graph going from [-9,9] on both axes and shaded the regions where the sum of the value of each axis adds up to over 9 or less than 9, they would result in 2 triangles of about 1/8 the size of the cartesian graph. This could also be accomplished by drawing a line equivalent to x + y > 9 and x + y < 9. In our case, where are subtracting, but this only changes the locations of the triangles, not their sizes. We would get the lines y = x - 9 and y = x + 9. We must shade the region that is bounded by these lines and causes overflow. Because the likelihood of any number is equally probable, the area given by the shaded area is the probability of overflow, which is around 1/4 of the area given in our [-9,9] square. After looking through the lisp manual, it stated that the "random" function returned an integer between "most-negative-fixnum" and "most-positive-fixnum" inclusive. Thus the range of integers is [-2^61 , 2^61 - 1] on our 64-bit machines. In order for this to overflow, the difference between two numbers must outside of this range. The range does not matter, as the number 1/4 is relative to the area dependent on the range. Because of this, the probability of overflow is about 1/4. 

